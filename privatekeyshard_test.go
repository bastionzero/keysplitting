package keysplitting

import (
	"crypto/rand"
	"crypto/rsa"
	"fmt"
	"math/big"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

const mockPemEncodedPks = `-----BEGIN RSA SPLIT PRIVATE KEY-----
MIIEFDCCAgkEggIAteOaA1ylKSBem82MmrVkQRC/o0OcnxOiXOqnu9ELIbVKXLqS
lFomAbintBM7A9u58gwVfEuTxP1CPYRMdsOzMKONpVUy1neIX6eO6+IRb5hEACF7
igvpWLxeC3u1aVPUiOFnV2T5Nkx2sv+ln3uENZIUArWetYuoH2SvWZ1opfFzFgBa
fAa1bsm7TlxMo9hVpaYT5jissPZte6W9pWXVucRyjDqCnBR/5NKXiqIiY4fHsmsB
UM6frbvNNI5IJ6ZSZoN23GccCIgIJ5GojtNHyprLwYF7mJjv+1eU+hald+A36dlO
1fJxeNRVxUecwoQwKprSC4pjgLiyGn8PasF7CqmvartktmH9odolAG6jHNsWvv0I
7DOUf5Srw9lQ7gPPfImS/1gqsZijsezIFFddjzdxr8c+jA4CX7lLVowaboR8i7Kz
mnIorBWEwOVMCf6m8qFDBSAXiVoOBuH2MjmBLqbdWz2FEuM2ljo4GUfKJfQ4M4Mo
flRkQNLguUNZE4PpEclQc8EGNvBfxx90Qf7G1WaozFL/um0GyRGGvgy044cBHUbf
IREdOltwizf8VfQl/yyRzHxpB4LEluoMf7H/qRRWSwLTfxwsvT+1ncvYQdfoQ4Bn
8o4IX76+TG9mcDCA7RI1Uvg1MNVW5bR1xq8wlGrcDBxwOdcYuVMfNIS/q7kCAwEA
AQSCAgBQuC591854kJmqnBLL+lXe0FD/I1dFMw0NWKSoOToybj4kylY0M/InzLiv
8OIViStn6pqN6Z+yYx2mBlBTSTcZ7px9j2b3ma6deOd4/9zq2XcczHWM1g+HvY/N
cAoe2dnwTEi/0XbWfcKFcBJSt409YHOlVj6KyAlapJj6kZwVmaybo8I2ltW0EI3F
6+bi30ldFErcfaBmg3X1X5/0mNiKFe2Ub3xMH+Lz8PxgHHK8jBvO+/2GF5tHEYg/
0qs0tvFfkrBoUUnP1/3ZOZJgyEiQNrMWKeNw4oariEZW+fzF1NuMcmqXU8+FOjCK
dqPzQ01r5zuVMrFfsspNf6NpK1ahN7cCgrTng+tRtkJJSz5mOqEcwUYnumhgJhkN
3wlw7JyYh4HwW13vT2c0RMSz5t0XaQfmeO5+eP2IIKKRfP+Vnz0sJQ+quHXBNNfe
pYGNoRiWQHU1Yr+WgLQGU7eFuDyOjzExkmq35RUipJNv6UrPaCJhpgE5Ks7sTFT1
W9FKfBQtHQozHQy+3pbQoVdzU6PzVvHqJs/Ks0DEZVidJpA38l52zCmMMZUapU+9
Q51gIa9GCHwn85OgjwFyb+7h1SNmoawsSOyFwBTAV3aJqWUAiz29nsJzjaxp0qHg
6cHZeePe6sf4aWcfC2UzZw6PdskazbaE7yHXUofw64Z+/ZttqwIBAA==
-----END RSA SPLIT PRIVATE KEY-----
`

var mockStructPks = &PrivateKeyShard{
	PublicKey: &rsa.PublicKey{
		N: new(big.Int).SetBytes([]byte("742042660583536148130086789339259969853699045569244251143526373791595736457972912353213703474495008460356368046237771919818907460800547941120825760435596402454124961261620596961799320924068363592325393925055887252371890891202144027987687548534620557728958109996534188079697349905165566261405357267669724797547620213168881422649811660322886890027855703004968284597325597468482897340164565050279686319087617009427405156695660950445583982662578956179953208024975839552188633118704982430560223393142419447265960344680832205458189851806499085929326131796400142274423028786270714540232040896139200881423049444575208924107151471686993145309320065047657671992748278587147620528979979345809067337703069621229224983733272938885727017008545338347033023125346450039940926505476675640402575736794137348205223327094942840951398162837908060167780323174525404944525139329930638199069913149041060295452270036047899938037374894862481966055303941354566751492909892410584922109228939245805197368472120420412448659555369257874635606553194464869529051678353824395311916736648677138607420252543583867564792412480812316311988489320160186212020352793880450483448353074732608388974139804612960856027240057174574897111833008608911530779286142252702904786856889")),
		E: 65537,
	},
	D:       new(big.Int).SetBytes([]byte("329306663735904940110884772222979261876681218907964683214848187132852020735989671033029016183613251846833759033689476453852538341940006784131231576875103582215903955515475477541987086655227600236919009924732030771555678156308427038374197460620680352361196452201079882382803230738127252514737095150676027796307206620666400403213545409436835518088172890197814068253370894605017150951809599603085679485449139571768517890702094210073530531022250344182366384782662825398677933132319189711775326599135252881863137650998938250545009019106104562400544464260481540483616297032025730524978587871688593814874901213594039922668798475723169844420993268294840377991672277132210594102445662622659667159012235045722724840780939318644453390609217234182324148109060611220005085595700118944817553568341813659472517400278903937648010462557487296118063411223792957989567610628486192561901744838544507942997601538070979447984360427930766935148207611320110292719075163371743902059867759553500801138626386385668428113815616881895262641342478215050101561835681732955524579981158905061711877406676298149111685185626900499163745745010411408155520239854889688236155648217552799333150377607880391647064675969130542287107966485081905512952651327015032257022487979")),
	SplitBy: Multiplication,
}

func expectKeysToMatch(k1 *PrivateKeyShard, k2 *PrivateKeyShard) {
	Expect(k1.D.String()).To(Equal(k2.D.String()), "split private exponents do not match")
	Expect(k1.PublicKey.N.String()).To(Equal(k2.PublicKey.N.String()), "moduli do not match")
	Expect(k1.PublicKey.E).To(Equal(k2.PublicKey.E), "public exponents do not match")
	Expect(k1.SplitBy).To(Equal(k2.SplitBy), "splitBy algorithms do not match")
}

var _ = Describe("SplitPrivateKey", func() {
	Context("PEM encoding", func() {
		When("Bidirectional encode/decode", func() {
			key, _ := rsa.GenerateKey(rand.Reader, 4096)
			shards, _ := SplitD(key, 2, Addition)
			var testShard *PrivateKeyShard

			It("Matches", func() {
				By("Successfully encoding")
				pemEncoded, err := shards[0].EncodePEM()

				fmt.Printf("%+v", shards[0])
				fmt.Printf("%+v", shards[0].PublicKey)
				Expect(err).To(BeNil())
				fmt.Println(pemEncoded)

				By("Successfully decoding")
				testShard, err = DecodePEM(pemEncoded)
				Expect(err).To(BeNil())

				fmt.Printf("%+v", testShard)
				fmt.Printf("%+v", testShard.PublicKey)

				By("Matching all key properties")
				expectKeysToMatch(testShard, shards[0])
			})
		})

		/*
			When("Checking an encoding against a reference", func() {
				It("Matches", func() {
					By("Successfully encoding")
					pemEncoded, err := mockStructPks.EncodePEM()
					Expect(err).To(BeNil())

					By(fmt.Sprintf("Matching encoding of %s", mockPemEncodedPks))
					Expect(pemEncoded).To(Equal(mockPemEncodedPks), fmt.Sprintf("???\n\n%s\n%s", pemEncoded, mockPemEncodedPks))
				})
			})

				When("Checking a decoding against a reference", func() {
					It("Matches", func() {
						By("Successfully decoding")
						testShard, err := DecodePEM(mockPemEncodedPks)
						Expect(err).To(BeNil())

						By("Matching all key properties")
						expectKeysToMatch(testShard, mockStructPks)
					})
				})
		*/
	})
})
